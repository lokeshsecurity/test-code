<?xml version="1.0" encoding="UTF-8"?>
<!-- * ****************************************************************** 
	* Copyrighted Material, Confidential, unauthorized review or * reproduction 
	is prohibited, ad so can and will result in * legal action against violators 
	* ****************************************************************** * *** 
	Copyright Holders ******************************************* * ****************************************************************** 
	* Government of Kingdom Of Bahrain (KOB) * Central Informatics Organization 
	(CIO) * Governerate Data Network (GDN) * National Data Services Project (NDS) 
	* The General Directorate of Information Technology (GDIT) * Application 
	Transformation Project (ATP) * Civil Registration Service (CRS) * ________________________________________________________________________________ 
	* Change Log * ________________________________________________________________________________ 
	* VER USER Timestamp Activity * ________________________________________________________________________________ 
	* * -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"

	xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd 
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-2.5.xsd 
            http://www.springframework.org/schema/jee
            http://www.springframework.org/schema/jee/spring-jee-2.5.xsd 
            http://www.springframework.org/schema/lang
            http://www.springframework.org/schema/lang/spring-lang-2.5.xsd 
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-2.5.xsd 
">

	<!-- Load in application properties reference -->
	<bean id="applicationProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/spring/data-access.properties</value>
				<value>/WEB-INF/spring/mail.properties</value>
<!-- 				<value>/WEB-INF/spring/application.properties</value> -->
			</list>
		</property>
	</bean>
	
<!-- 	<bean id="fileUtil" class="bh.gov.cio.gbs.util.FileUtil"> -->
<!-- 	    <property name="folderUrl" value="${ega.file.server.folder.url}" /> -->
<!-- 	    <property name="fileServerDomain" value="${ega.file.server.domain}" /> -->
<!-- 	    <property name="fileServerPassword" value="${ega.file.server.password}" /> -->
<!-- 	    <property name="fileServerUsername" value="${ega.file.server.Username}" /> -->
<!-- 	</bean> -->
	
	
	<!-- Data Sources -->
	<bean id="main-ds" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${db.driverclass}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="testOnBorrow" value="true"></property>
		<property name="testWhileIdle" value="true"></property>
		<property name="testOnReturn" value="true"></property>
		<property name="validationQuery" value="select 1 "></property>
		<property name="initialSize" value="20"></property>
		<property name="maxActive" value="15"></property>
	</bean>

	<!-- Distributed Transaction Manager Definition -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="main-ds" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/> 
	
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />


	<!-- Data Access Templates -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="main-ds" />
		
	</bean>

	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="main-ds" />
	</bean>

	<bean id="baseDao" class="bh.gov.cio.gbs.dataaccess.BaseDAO"
		abstract="true">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate" />
		<property name="queries" ref="queryMap" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>



	<bean id="queryMap" class="java.util.HashMap">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="TEST_QUERY" value="select 1 from sysibm.sysdummy1" />
				<entry key="GET_ORGANIZATIONS_QUERY" value="SELECT ORAGNIZATION_ID, ORAGNIZATION_NAME, ORAGNIZATION_NAME_NORMALIZED, ORGANIZATION_TYPE_ID, ORGANIZATION_TYPE_NAME, ORGANIZATION_TYPE_DESCRIPTION, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON FROM GBS.ORGANIZATIONS "></entry>
				
				<entry key="GET_SOURCE_ORGANIZATIONS_QUERY" value="SELECT ORGANIZATION_ID, ORGANIZATION_NAME, ORGANIZATION_NAME_NORMALIZED, ORGANIZATION_TYPE_ID, ORGANIZATION_TYPE_NAME, ORGANIZATION_TYPE_DESCRIPTION, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON 
																   FROM GBS.ORGANIZATIONS WHERE ORGANIZATION_TYPE_ID = (SELECT ORGANIZATION_TYPE_ID FROM GBS.ORGANZIATION_TYPE WHERE LOWER(ORGANIZATION_TYPE_NAME) = LOWER('SOURCE')) "></entry>
				
				<entry key="GET_DESTINATION_ORGANIZATIONS_QUERY" value="SELECT ORGANIZATION_ID, ORGANIZATION_NAME, ORGANIZATION_NAME_NORMALIZED, ORGANIZATION_TYPE_ID, ORGANIZATION_TYPE_NAME, ORGANIZATION_TYPE_DESCRIPTION, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON 
																	    FROM GBS.ORGANIZATIONS WHERE ORGANIZATION_TYPE_ID = (SELECT ORGANIZATION_TYPE_ID FROM GBS.ORGANZIATION_TYPE WHERE LOWER(ORGANIZATION_TYPE_NAME) = LOWER('DESTINATION')) "></entry>

				<entry key="SEARCH_ORGANIZATION_QUERY" value="SELECT ORAGNIZATION_ID, ORAGNIZATION_NAME, ORAGNIZATION_NAME_NORMALIZED, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON  FROM GBS.ORAGNIZATION WHERE ORAGNIZATION_NAME_NORMALIZED LIKE :ORAGNIZATION_NAME_NORMALIZED "></entry>
				
				<entry key="GET_MEMBERS_QUERY" value="SELECT MEMBER_ID, MEMBER_NAME, MEMBER_NAME_NORMALIZED, MEMBER_OCCUPATION, MEMBER_OCCUPATION_NORMLIZED, ORGANIZATION_ID, MEMBER_DURATION, MEMBER_EXPIRY_DATE, MEMBER_NOTES, MEMBER_NOTES_NORMALIZED, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON FROM GBS.MEMBER"></entry>
				
				<entry key="SEARCH_MEMBER_QUERY" value="SELECT MEMBER_ID, MEMBER_NAME, MEMBER_NAME_NORMALIZED, MEMBER_OCCUPATION, MEMBER_OCCUPATION_NORMLIZED, ORGANIZATION_ID, MEMBER_DURATION, MEMBER_EXPIRY_DATE, MEMBER_NOTES, MEMBER_NOTES_NORMALIZED, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON FROM GBS.MEMBER WHERE MEMBER_NAME_NORMALIZED LIKE :MEMBER_NAME_NORMALIZED "></entry>
				
				<entry key="GET_BOARD_MEMBERS_QUERY" value="SELECT BOARD_ID, BOARD_NAME, BOARD_NAME_NORMALIZED, BOARD_STATUS_ID, BOARD_STATUS_NAME, BOARD_NOTES, BOARD_NOTES_NORMALIZED, BOARD_DURATION, BOARD_EXPIRY_DATE, BOARD_CREATED_ON, BOARD_UPDATED_BY, BOARD_UPDATED_ON, BOARD_ORAGNIZATION_ID, BOARD_ORAGNIZATION_NAME, BOARD_ORAGNIZATION_NAME_NORMALIZED, MEMBER_ID, MEMBER_NAME, MEMBER_NAME_NORMALIZED, MEMBER_OCCUPATION, MEMBER_OCCUPATION_NORMLIZED, MEMBER_DURATION, MEMBER_EXPIRY_DATE, MEMBER_NOTES, MEMBER_NOTES_NORMALIZED, MEMBER_STATUS_ID, MEMBER_STATUS_NAME, MEMBER_ORAGNIZATION_ID, MEMBER_ORAGNIZATION_NAME, MEMBER_ORAGNIZATION_NAME_NORMALIZED, MEMBER_CREATED_BY, MEMBER_CREATED_ON, MEMBER_UPDATED_ON, MEMBER_UPDATED_BY FROM GBS.BOARDS_MEMBERS "></entry>
				
				<entry key="GET_BOARDS_DECREE_QUERY" value="SELECT BOARD_ID, BOARD_NAME, BOARD_NAME_NORMALIZED, STATUS_ID, STATUS_NAME, BOARD_NOTES, BOARD_DURATION, BOARD_NOTES_NORMALIZED, BOARD_EXPIRY_DATE, BOARD_CREATED_BY, BOARD_CREATED_ON, BOARD_UPDATED_BY, BOARD_UPDATED_ON, ORAGNIZATION_NAME, ORAGNIZATION_ID, ORAGNIZATION_NAME_NORMALIZED, DECREE_ID, DECREE_NUMBER, DECREE_YEAR, DECREE_DESCRIPTION, DECREE_DESCRIPTION_NORMALIZE FROM GBS.BOARDS_DECREE"></entry>
				
				<entry key="GET_ROLES_QUERY" value="SELECT ROLE_ID, ROLE_NAME, ROLE_NORMALIZED, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON , COUNT_VALID  FROM GBS.ROLE WHERE  DISPLAY_SEQUENCE > -1 ORDER BY DISPLAY_SEQUENCE ASC "></entry>
				
				<entry key="SEARCH_ROLE_QUERY" value="SELECT ROLE_ID, ROLE_NAME, ROLE_NORMALIZED, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON  FROM GBS.ROLE WHERE ROLE_NORMALIZED LIKE :ROLE_NORMALIZED "></entry>
				
				<entry key="GET_DECREE_TYPES_QUERY" value="SELECT DECREE_TYPE_ID, DECREE_TYPE_NAME, DECREE_TYPE_NAME_NORMALIZED, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON FROM GBS.DECREE_TYPE WHERE  DISPLAY_SEQUENCE > -1 ORDER BY DISPLAY_SEQUENCE ASC "></entry>
				
				<entry key="RECORD_LOGIN_HISTORY_QUERY" value="INSERT INTO GBS.LOGIN_HISTORY(USER_NAME, SESSION_ID, LOGIN_STATUS, LOGIN_DATE , LOGOUT_DATE , ACTION) VALUES (:USER_NAME, :SESSION_ID, :LOGIN_STATUS, :LOGIN_DATE , :LOGOUT_DATE , :ACTION) "></entry>
				
				<entry key="GET_ATTACHMENT_TYPES_QUERY" value="SELECT ATTACHMENT_TYPE_ID, ATTACHMENT_TYPE_NAME, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON , SHOW_FIELDS  FROM GBS.ATTACHMENT_TYPE WHERE (LOWER(FUNCTION_USED) = LOWER('ADD_BOARD') OR FUNCTION_USED IS NULL) AND DISPLAY_SEQUENCE > -1 ORDER BY DISPLAY_SEQUENCE ASC "></entry>
				
				<entry key="GET_RUNNABLE_NOTIFICATIONS_QUERY" value="SELECT BOARD_ID,BOARD_NAME,BOARD_NAME_NORMALIZED,PARENT_BOARD_ID,BOARD_TYPE_ID, BOARD_TYPE_NAME,STATUS_ID,STATUS_NAME,SOURCE_ORGANIZATION_NAME,SOURCE_ORGANIZATION_ID, 
								BOARD_EXPIRY_DATE,BOARD_START_DATE,ACTUAL_DATE,NOTIFICATION_ID,LAST_RUN_DATE,REPEAT_EVERY,NOTIFICATION_DATE,MEMBER_ID,MEMBER_NAME,ROLE_NAME,MEMBER_END_DATE, NOTIFICATION_TYPE
								FROM GBS.BOARDS_MEMBERS_NOTIFICATIONS WHERE DATE(NOTIFICATION_DATE) BETWEEN :NOTIFICATION_DATE_START AND :NOTIFICATION_DATE_END
								AND DATE(ACTUAL_DATE) &gt; :TODAY" ></entry>
								
				<entry key="RECORD_NOTIFICATION_HISTORY_QUERY" value="INSERT INTO GBS.NOTIFICATION_HISTORY(NOTIFICATION_ID, STATUS, RUN_DATE, DESCRIPTION, JOB_RUNNABLE_TYPE, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON) 
																		VALUES (:NOTIFICATION_ID, :STATUS, :RUN_DATE, :DESCRIPTION, :JOB_RUNNABLE_TYPE, :CREATED_BY, :CREATED_ON , :UPDATED_BY , :UPDATED_ON)"></entry>
																		
				<entry key="GET_BOARD_TYPES_QUERY" value="SELECT BOARD_TYPE_ID, BOARD_TYPE_NAME, BOARD_TYPE_NAME_NORMALIZE, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON , HAVE_EXPIRY_DATE , REQUIRED_LEGISLATIVE_TOOL FROM GBS.BOARD_TYPE WHERE DISPLAY_SEQUENCE > -1 ORDER BY DISPLAY_SEQUENCE ASC "></entry>	
				
				
				<entry key="UPDATE_NOTIFICATION_DATES_QUERY" value="UPDATE GBS.NOTIFICATION SET LAST_RUN_DATE= :UPDATED_LAST_RUN_DATE, NOTIFICATION_DATE= :UPDATED_NOTIFICATION_DATE WHERE NOTIFICATION_ID= :NOTIFICATION_ID"></entry>
				
				<entry key="GET_NOTIFICATION_PERIOD_QUERY" value="SELECT NOTIFICATION_PERIOD_ID, NOTIFICATION_PERIOD_NAME, NOTIFICATION_PERIOD_DAY, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON
																  		FROM GBS.NOTIFICATION_PERIOD ORDER BY DISPLAYSEQUENCE ASC"></entry>
																  		
				<entry key="GET_NOTIFICATION_REPEAT_QUERY" value="SELECT T.NOTIFICATION_PERIOD_ID AS PARENT_NOTIFICATION_PERIOD_ID , T.NOTIFICATION_PERIOD_CHILD_ID AS CHILD_NOTIFICATION_PERIOD_ID , 
																	(SELECT NOTIFICATION_PERIOD_1.NOTIFICATION_PERIOD_NAME FROM GBS.NOTIFICATION_PERIOD   NOTIFICATION_PERIOD_1      WHERE NOTIFICATION_PERIOD_ID = T.NOTIFICATION_PERIOD_CHILD_ID) AS CHILD_NOTIFICATION_PERIOD_NAME ,
																	(SELECT NOTIFICATION_PERIOD_2.NOTIFICATION_PERIOD_DAY FROM GBS.NOTIFICATION_PERIOD    NOTIFICATION_PERIOD_2   WHERE NOTIFICATION_PERIOD_ID = T.NOTIFICATION_PERIOD_CHILD_ID) AS CHILD_NOTIFICATION_PERIOD_DAY
																	FROM (SELECT NOTIFICATION_PERIOD_ID , NOTIFICATION_PERIOD_CHILD_ID FROM GBS.NOTIFICATION_REPEAT 
																	WHERE NOTIFICATION_PERIOD_ID IN (SELECT NOTIFICATION_PERIOD_ID FROM GBS.NOTIFICATION_PERIOD)
																	) T ORDER BY T.NOTIFICATION_PERIOD_ID ASC"></entry>
																	
				<entry key="ADD_BOARD_QUERY" value="INSERT INTO GBS.BOARD(BOARD_NAME, BOARD_NAME_NORMALIZED, SOURCE_ORGANIZATION_ID, BOARD_START_DATE, BOARD_EXPIRY_DATE, BOARD_TYPE_ID, STATUS_ID, CREATED_BY, CREATED_ON, PARENT_BOARD_ID , NOTIFICATION_BEFORE , NOTIFICATION_EVERY ) 
    																VALUES( :BOARD_NAME, :BOARD_NAME_NORMALIZED, :SOURCE_ORGANIZATION_ID, :BOARD_START_DATE, :BOARD_EXPIRY_DATE, :BOARD_TYPE_ID, :STATUS_ID, :CREATED_BY, :CREATED_ON, :PARENT_BOARD_ID , :NOTIFICATION_BEFORE , :NOTIFICATION_EVERY )"></entry>
    																
    			<entry key="ADD_DESTINATION_ORGNIZATION_QUERY" value="INSERT INTO GBS.BOARD_DESTINATION_ORGANIZATION(BOARD_ID, DESTINATION_ORGANIZATION_ID,PRIMARY_ORGANIZATION) 
    																											VALUES(?, ?, ?)"></entry>
    			
    			<entry key="ADD_NOTIFICATION_QUERY" value="INSERT INTO GBS.NOTIFICATION(BOARD_ID, ACTUAL_DATE, REPEAT_EVERY, NOTIFICATION_DATE, CREATED_BY, CREATED_ON, NOTIFICATION_TYPE) 
    																				VALUES(:BOARD_ID, :ACTUAL_DATE, :REPEAT_EVERY, :NOTIFICATION_DATE, :CREATED_BY, :CREATED_ON, :NOTIFICATION_TYPE)"></entry>
    			<entry key="GET_BOARD_TYPE_QUERY" value="SELECT HAVE_EXPIRY_DATE
    														FROM GBS.BOARD_TYPE WHERE BOARD_TYPE_ID = :BOARD_TYPE_ID"></entry>
    																																				
    			<entry key="IS_DECREE_EXISTS_QUERY" 
    					value="SELECT DECREE_ID FROM GBS.DECREES WHERE DECREE_NUMBER = :DECREE_NUMBER AND DECREE_YEAR = :DECREE_YEAR AND DECREE_TYPE_ID = :DECREE_TYPE_ID"></entry>
    					
    			<entry key="ADD_DECREE_QUERY" 
    					value="INSERT INTO GBS.DECREE(DECREE_NUMBER, DECREE_YEAR, DECREE_TYPE_ID, ISSUE_DATE_MELADY, ISSUE_DATE_HIGRY, DECREE_DESCRIPTION, DECREE_DESCRIPTION_NORMALIZE, CREATED_BY, CREATED_ON) 
    											VALUES(:DECREE_NUMBER, :DECREE_YEAR, :DECREE_TYPE_ID, :ISSUE_DATE_MELADY, :ISSUE_DATE_HIGRY, :DECREE_DESCRIPTION, :DECREE_DESCRIPTION_NORMALIZE, :CREATED_BY, :CREATED_ON)"></entry>
				
				<entry key="ADD_BOARD_DECREE_QUERY" 
    					value="INSERT INTO GBS.BOARD_DECREE(BOARD_ID, DECREE_ID) 
    												VALUES(?, ?)"></entry>
    					
    			<entry key="ADD_MEMBER_QUERY" 
    					value="INSERT INTO GBS.MEMBER(BOARD_ID, CPR_NUMBER, ROLE_ID, MEMBER_NAME, MEMBER_NAME_NORMALIZED, MEMBER_OCCUPATION, MEMBER_OCCUPATION_NORMLIZED, ORGANIZATION_ID, ORGANIZATION_ON_BEHALF_ID, MEMBER_START_DATE, MEMBER_END_DATE,STATUS_ID, CREATED_BY, CREATED_ON, NOTIFICATION_BEFORE, NOTIFICATION_EVERY ) 
    												VALUES(:BOARD_ID, :CPR_NUMBER, :ROLE_ID, :MEMBER_NAME, :MEMBER_NAME_NORMALIZED, :MEMBER_OCCUPATION, :MEMBER_OCCUPATION_NORMLIZED, :ORGANIZATION_ID, :ORGANIZATION_ON_BEHALF_ID, :MEMBER_START_DATE, :MEMBER_END_DATE, :STATUS_ID, :CREATED_BY, :CREATED_ON, :NOTIFICATION_BEFORE, :NOTIFICATION_EVERY )"></entry>
    			
    			<entry key="ADD_MEMBER_DECREE_QUERY" 
    					value="INSERT INTO GBS.MEMBER_DECREE(MEMBER_ID, DECREE_ID) 
   	 													VALUES(?, ?)"></entry>
   	 			<entry key="ADD_ATTACHMENT_QUERY" 
    					value="INSERT INTO GBS.ATTACHMENT(DECREE_ID, ATTACHMENT_NAME, ATTACHMENT_NAME_NORMALIZED, ATTACHMENT_SIZE, ATTACHMENT_MIME, ATTACHMENT_TYPE_ID, BOARD_ID, CREATED_BY, CREATED_ON) 
    												VALUES(:DECREE_ID, :ATTACHMENT_NAME, :ATTACHMENT_NAME_NORMALIZED, :ATTACHMENT_SIZE, :ATTACHMENT_MIME, :ATTACHMENT_TYPE_ID, :BOARD_ID, :CREATED_BY, :CREATED_ON)"></entry>		
    												
    			<entry key="IS_BOARD_NAME_EXISTS_QUERY" 
    					value="SELECT BOARD_ID FROM GBS.BOARD WHERE BOARD_NAME_NORMALIZED LIKE :BOARD_NAME_NORMALIZED AND BOARD_TYPE_ID = :BOARD_TYPE_ID"></entry>		
				
				<entry key="GET_BOARD_NOTIFICATION_BY_ID_QUERY" 
    					value="SELECT BOARD_ID,BOARD_NAME,BOARD_NAME_NORMALIZED,PARENT_BOARD_ID,BOARD_TYPE_ID, BOARD_TYPE_NAME,STATUS_ID,STATUS_NAME,SOURCE_ORGANIZATION_NAME,SOURCE_ORGANIZATION_ID, 
								BOARD_EXPIRY_DATE,BOARD_START_DATE,ACTUAL_DATE,NOTIFICATION_ID,LAST_RUN_DATE,REPEAT_EVERY,NOTIFICATION_DATE 
								FROM GBS.BOARDS_NOTIFICATIONS WHERE BOARD_ID= :BOARD_ID "></entry>	
												
				<entry key="GET_GOVERNMENT_TYPES_QUERY" value="SELECT GOVERNMENT_BOARD_TYPE_ID, GOVERNMENT_BOARD_TYPE_NAME, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON FROM GBS.GOVERNMENT_BOARD_TYPE"></entry>		
				
				<entry key="GET_BOARD_VALID_STATUS_QUERY" value="SELECT STATUS_ID
																FROM GBS.STATUS
																WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('BOARD')) AND LOWER(STATUS_NAME_KEY) = LOWER('VALID')"></entry>		
				<entry key="GET_BOARD_NEW_STATUS_QUERY" value="SELECT STATUS_ID
																FROM GBS.STATUS
																WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('BOARD')) AND LOWER(STATUS_NAME_KEY) = LOWER('NEW')"></entry>		
																
				<entry key="GET_MEMBER_VALID_STATUS_QUERY" value="SELECT STATUS_ID
																FROM GBS.STATUS
																WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('MEMBER')) AND LOWER(STATUS_NAME_KEY) = LOWER('VALID')"></entry>		
				
				<entry key="GET_MEMBER_INCOMPLETE_STATUS_QUERY" value="SELECT STATUS_ID
																FROM GBS.STATUS
																WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('MEMBER')) AND LOWER(STATUS_NAME_KEY) = LOWER('INCOMPLETE')"></entry>		
				<!--  
				<entry key="SEARCH_BOARD_QUERY" value="SELECT BOARD_ID, BOARD_NAME, BOARD_NAME_NORMALIZED, BOARD_TYPE_ID, BOARD_TYPE_NAME, STATUS_ID, STATUS_NAME, BOARD_START_DATE, BOARD_EXPIRY_DATE, BOARD_CREATED_BY, BOARD_CREATED_ON, 
													BOARD_UPDATED_BY, BOARD_UPDATED_ON, SOURCE_ORGANIZATION_ID, SOURCE_ORGANIZATION_NAME, SOURCE_ORGANIZATION_NAME_NORMALIZED, DECREE_ID, DECREE_NUMBER, DECREE_YEAR, DECREE_TYPE_ID, DECREE_TYPE_NAME , DECREE_DESCRIPTION,
													DECREE_DESCRIPTION_NORMALIZE, ATTACHMENT_ID, ATTACHMENT_NAME, ATTACHMENT_NAME_NORMALIZED, ATTACHMENT_MIME, ATTACHMENT_SIZE,
													(SELECT ORGANIZATION_NAME  FROM GBS.ORGANIZATIONS WHERE ORGANIZATION_TYPE_ID = (SELECT ORGANIZATION_TYPE_ID FROM GBS.ORGANZIATION_TYPE WHERE LOWER(ORGANIZATION_TYPE_NAME) = LOWER('Destination')) 
													AND ORGANIZATION_ID = (SELECT DESTINATION_ORGANIZATION_ID FROM GBS.BOARD_DESTINATION_ORGANIZATION DESO WHERE DESO.BOARD_ID = BDA.BOARD_ID AND PRIMARY_ORGANIZATION = 1)) AS PRIMARY_DESTINATION_ORGANIZATION 
													FROM GBS.BOARDS_DECREES_ATTACHMENTS BDA WHERE "></entry>		
				-->									
				<entry key="SEARCH_BOARD_QUERY" value="SELECT BOARD_ID, BOARD_NAME, BOARD_NAME_NORMALIZED, BOARD_TYPE_ID, BOARD_TYPE_NAME, STATUS_ID, STATUS_NAME, BOARD_START_DATE, BOARD_EXPIRY_DATE, BOARD_CREATED_BY, BOARD_CREATED_ON, 
													BOARD_UPDATED_BY, BOARD_UPDATED_ON, SOURCE_ORGANIZATION_ID, SOURCE_ORGANIZATION_NAME, SOURCE_ORGANIZATION_NAME_NORMALIZED, DECREE_ID, DECREE_NUMBER, DECREE_YEAR, DECREE_TYPE_ID, DECREE_TYPE_NAME , DECREE_DESCRIPTION,
													DECREE_DESCRIPTION_NORMALIZE, ATTACHMENT_ID, ATTACHMENT_NAME, ATTACHMENT_NAME_NORMALIZED, ATTACHMENT_MIME, ATTACHMENT_SIZE , PRIMARY_DESTINATION_ORGANIZATION , ISSUE_DATE_MELADY , GOVERNMENT_BOARD_TYPE_ID
													FROM GBS.BOARDS_DECREES_ATTACHMENTS BDA WHERE "></entry>	
													
				<entry key="GET_BOARD_STATUS_LIST_QUERY" 
													 value="SELECT STATUS_ID , STATUS_NAME , STATUS_TYPE_ID FROM GBS.STATUS WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME) = LOWER('BOARD'))"></entry>
													
				<entry key="SEARCH_BOARD_TEXT_QUERY"  value="SELECT BOARD_ID, BOARD_NAME, BOARD_NAME_NORMALIZED, STATUS_ID, SOURCE_ORGANIZATION_ID, BOARD_START_DATE, BOARD_EXPIRY_DATE, BOARD_TYPE_ID, PARENT_BOARD_ID, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON 
															FROM GBS.BOARD WHERE BOARD_NAME_NORMALIZED LIKE :BOARD_NAME_NORMALIZED"></entry>																																									
				
				<entry key="RECORD_BOARD_HISTORY_QUERY"  value="INSERT INTO GBS.BOARD_HISTORY(BOARD_ID, BOARD_NAME, BOARD_TYPE_ID, DECREE_LIST, PARENT_BOARD_ID, SOURCE_ORGANIZATION_ID, DESTINATION_ORGANIZATION_IDS, CREATED_ON, CREATED_BY, BOARD_START_DATE, BOARD_EXPIRY_DATE, STATUS, MEMBER_LIST, ACTION_OPERATION, BOARD_STATUS_ID , NOTIFICATION_BEFORE , NOTIFICATION_EVERY, NOTIFICATION_DATE) 
																VALUES(:BOARD_ID, :BOARD_NAME, :BOARD_TYPE_ID, :DECREE_LIST , :PARENT_BOARD_ID, :SOURCE_ORGANIZATION_ID, :DESTINATION_ORGANIZATION_IDS, :CREATED_ON, :CREATED_BY, :BOARD_START_DATE, :BOARD_EXPIRY_DATE, :STATUS, :MEMBER_LIST, :ACTION_OPERATION, :BOARD_STATUS_ID , :NOTIFICATION_BEFORE , :NOTIFICATION_EVERY, :NOTIFICATION_DATE)"></entry>
																
				<entry key="RECORD_MEMBER_HISTORY_QUERY"  value="INSERT INTO GBS.MEMBER_HISTORY(MEMBER_ID, MEMBER_NAME, CPR_NUMBER, MEMBER_OCCUPATION, ORGANIZATION_ID, ROLE_ID, ORGANIZATION_ON_BEHALF_ID, CREATED_BY, CREATED_ON, MEMBER_START_DATE, MEMBER_END_DATE, BOARD_ID, BOARD_NAME, BOARD_TYPE_ID,BOARD_TYPE_NAME, BOARD_EXPIRY_DATE, BOARD_START_DATE, DECREE_LIST , PARENT_BOARD_ID, MEMBER_STATUS_ID, STATUS, ACTION_OPERATION, NOTIFICATION_BEFORE, NOTIFICATION_EVERY,NOTIFICATION_DATE ) 
																 VALUES(:MEMBER_ID, :MEMBER_NAME, :CPR_NUMBER, :MEMBER_OCCUPATION, :ORGANIZATION_ID, :ROLE_ID, :ORGANIZATION_ON_BEHALF_ID, :CREATED_BY, :CREATED_ON, :MEMBER_START_DATE, :MEMBER_END_DATE, :BOARD_ID, :BOARD_NAME, :BOARD_TYPE_ID, (SELECT BOARD_TYPE_NAME  FROM GBS.BOARD_TYPE WHERE BOARD_TYPE_ID= :BOARD_TYPE_ID), :BOARD_EXPIRY_DATE, :BOARD_START_DATE, :DECREE_LIST, :PARENT_BOARD_ID, :MEMBER_STATUS_ID, :STATUS, :ACTION_OPERATION, :NOTIFICATION_BEFORE, :NOTIFICATION_EVERY, :NOTIFICATION_DATE)"></entry>												
																												
				<entry key="GET_ATTACHMENT_TYPE_DECREE_QUERY"  value="SELECT ATTACHMENT_TYPE_ID FROM GBS.ATTACHMENT_TYPE WHERE SHOW_FIELDS = 1"></entry>												
					
					
				<entry key="GET_USERNAME_BY_SESSION_ID_QUERY" value="SELECT USER_NAME FROM GBS.LOGIN_HISTORY WHERE SESSION_ID = :SESSION_ID"></entry>
				
				<entry key="ADD_SUBSCRIBER_QUERY" value="INSERT INTO GBS.SUBSCRIBER(SUBSCRIBER_EMAIL, NOTIFICATION_ID, CREATED_BY, CREATED_ON) 
																				VALUES(:SUBSCRIBER_EMAIL, :NOTIFICATION_ID, :CREATED_BY, :CREATED_ON)"></entry>		
																				
				<entry key="GET_MEMBER_STATUS_LIST_QUERY" value="SELECT STATUS_ID , STATUS_NAME , STATUS_TYPE_ID FROM GBS.STATUS WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME) = LOWER('Member'))"></entry>																											
				
				<entry key="SEARCH_MEMBER_FORM_QUERY" value="SELECT MEMBER_ID, CPR_NUMBER, BOARD_ID, BOARD_NAME, MEMBER_NAME, MEMBER_OCCUPATION, MEMBER_START_DATE, MEMBER_END_DATE, STATUS_ID, STATUS_NAME, ORGANIZATION_ID, ORGANIZATION_NAME, ORGANIZATION_ID_OBF, ORGANIZATION_NAME_OBF, ROLE_ID, ROLE_NAME
															FROM GBS.MEMBERS WHERE "></entry>
				
				<entry key="GET_DECREES_BY_BOARD_ID_QUERY" value="SELECT BOARD_ID, DECREE_ID, DECREE_NUMBER, DECREE_YEAR, DECREE_TYPE_ID, DECREE_TYPE_NAME, DECREE_DESCRIPTION, DECREE_DESCRIPTION_NORMALIZE, ISSUE_DATE_MELADY, ISSUE_DATE_HIGRY, ATTACHMENT_ID, ATTACHMENT_NAME, ATTACHMENT_NAME_NORMALIZED, ATTACHMENT_MIME, ATTACHMENT_SIZE , ATTACHMENT_TYPE_ID , CREATED_ON
   	 																FROM GBS.BOARDS_ATTACHMENTS WHERE BOARD_ID = :BOARD_ID"></entry>																											
															
				<entry key="GET_BOARD_QUERY" value="SELECT BOARD_ID, BOARD_NAME, STATUS_ID, SOURCE_ORGANIZATION_ID, BOARD_START_DATE, BOARD_EXPIRY_DATE, BOARD_TYPE_ID, PARENT_BOARD_ID , NOTIFICATION_BEFORE, NOTIFICATION_EVERY , (SELECT B.BOARD_NAME FROM GBS.BOARD B WHERE B.BOARD_ID = D.PARENT_BOARD_ID) AS PARENT_BOARD_NAME
													FROM GBS.BOARD D WHERE BOARD_ID = :BOARD_ID"></entry>		
													
				<entry key="GET_BOARD_DESTINATION_ORGANIZATIONS_QUERY" value="SELECT DESTINATION_ORGANIZATION_ID  FROM GBS.BOARD_DESTINATION_ORGANIZATION WHERE BOARD_ID = :BOARD_ID ORDER BY PRIMARY_ORGANIZATION DESC"></entry>		
				
				<entry key="GET_BOARD_MEMBER_QUERY" value="SELECT MEMBER_ID, BOARD_ID, CPR_NUMBER, STATUS_ID, ROLE_ID, MEMBER_NAME, MEMBER_OCCUPATION, ORGANIZATION_ID, ORGANIZATION_ON_BEHALF_ID, MEMBER_START_DATE, MEMBER_END_DATE, NOTIFICATION_BEFORE, NOTIFICATION_EVERY
																FROM GBS.MEMBER WHERE BOARD_ID = :BOARD_ID"></entry>																
				<entry key="UPDATE_BOARD_QUERY" value="UPDATE GBS.BOARD SET  UPDATED_BY=:LOGGEDIN_USERNAME, UPDATED_ON=:UPDATE_ON, NOTIFICATION_BEFORE = :NOTIFICATION_BEFORE, NOTIFICATION_EVERY = :NOTIFICATION_EVERY,STATUS_ID=:BOARD_STATUS_ID
    													WHERE BOARD_ID = :BOARD_ID"></entry>
    			<entry key="UPDATE_NOTIFICATION_QUERY" value="UPDATE GBS.NOTIFICATION 
    															SET REPEAT_EVERY=:REPEAT_EVERY,NOTIFICATION_DATE=:NOTIFICATION_DATE,UPDATED_BY=:UPDATED_BY, UPDATED_ON=:UPDATED_ON
    															WHERE BOARD_ID=:BOARD_ID"></entry>
    			<entry key="UPDATE_SUBSCRIBER_QUERY" value="UPDATE GBS.SUBSCRIBER 
    														SET SUBSCRIBER_EMAIL = :SUBSCRIBER_EMAIL, UPDATED_BY = :UPDATED_BY, UPDATED_ON = :UPDATED_ON
   		 													WHERE NOTIFICATION_ID = :NOTIFICATION_ID"></entry>
   		 													
   		 		<entry key="RENEW_MEMBER_QUERY" value="UPDATE GBS.MEMBER 
   	 													SET  MEMBER_END_DATE = :MEMBER_END_DATE,  UPDATED_BY= :UPDATED_BY, UPDATED_ON = :UPDATE_ON
    													WHERE BOARD_ID = :BOARD_ID AND MEMBER_ID = :MEMBER_ID"></entry>		
    													
    			<entry key="UPDATE_MEMBER_QUERY" value="UPDATE GBS.MEMBER 
    											SET CPR_NUMBER= :CPR_NUMBER, ROLE_ID=:ROLE_ID, MEMBER_NAME=:MEMBER_NAME, MEMBER_NAME_NORMALIZED = :MEMBER_NAME_NORMALIZED, MEMBER_OCCUPATION = :MEMBER_OCCUPATION, MEMBER_OCCUPATION_NORMLIZED = :MEMBER_OCCUPATION_NORMLIZED, ORGANIZATION_ID = :ORGANIZATION_ID, ORGANIZATION_ON_BEHALF_ID= :ORGANIZATION_ON_BEHALF_ID, MEMBER_START_DATE= :MEMBER_START_DATE, MEMBER_END_DATE= :MEMBER_END_DATE, UPDATED_BY= :UPDATED_BY, UPDATED_ON= :UPDATED_ON,NOTIFICATION_BEFORE= :NOTIFICATION_BEFORE,NOTIFICATION_EVERY=:NOTIFICATION_EVERY, STATUS_ID= :STATUS_ID 
    											WHERE BOARD_ID= :BOARD_ID AND MEMBER_ID= :MEMBER_ID"></entry>	
    											
    			<entry key="GET_ATTACHMENT_TYPE_FOR_MEMBER_QUERY" value="SELECT ATTACHMENT_TYPE_ID, ATTACHMENT_TYPE_NAME, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON , SHOW_FIELDS  FROM GBS.ATTACHMENT_TYPE WHERE (LOWER(FUNCTION_USED) = LOWER('UPDATE_BOARD') OR FUNCTION_USED IS NULL) AND DISPLAY_SEQUENCE > -1 ORDER BY DISPLAY_SEQUENCE ASC"></entry>
    			
    			<entry key="GET_NOTIFICATION_BY_BOARD_ID_QUERY" value="SELECT NOTIFICATION_ID, SUBSCRIBER_EMAIL FROM GBS.NOTIFICATIONS WHERE BOARD_ID = :BOARD_ID "></entry>	
    			
    			<entry key="IS_SUBSCRIBER_EXISTS_QUERY" 
    					value="SELECT SUBSCRIBER_ID FROM GBS.SUBSCRIBER WHERE NOTIFICATION_ID= :NOTIFICATION_ID  AND SUBSCRIBER_EMAIL=:SUBSCRIBER_EMAIL"></entry>	
						
    			<entry key="GET_MEMBER_QUERY" 
    					value="SELECT  ROLE_ID, MEMBER_NAME, MEMBER_OCCUPATION, ORGANIZATION_ID, ORGANIZATION_ON_BEHALF_ID, MEMBER_START_DATE, MEMBER_END_DATE, NOTIFICATION_BEFORE, NOTIFICATION_EVERY
   	 							FROM GBS.MEMBER where MEMBER_ID= :MEMBER_ID"></entry>
   	 							
   	 			<entry key="GET_BOARD_TYPE_NAME_QUERY" 
    					value="SELECT BOARD_TYPE_NAME FROM GBS.BOARD_TYPE WHERE BOARD_TYPE_ID= :BOARD_TYPE_ID"></entry>
    			
    			<entry key="GET_MEMBERS_DECREES_QUERY" 
    					value="SELECT DISTINCT DECREE_ID , DECREE_NUMBER , DECREE_YEAR , DECREE_DESCRIPTION , DECREE_DESCRIPTION_NORMALIZE , DECREE_TYPE_ID, ATTACHMENT_ID
    					FROM GBS.MEMBERS_DECREES 
    					WHERE MEMBER_ID =:MEMBER_ID AND DECREE_ID IN (:DECREE_ID)"></entry>		
    					
    					
    			<entry key="GET_BOARD_DECREES_QUERY" 
    					value="SELECT DECREE_ID , DECREE_NUMBER , DECREE_YEAR , DECREE_DESCRIPTION , DECREE_DESCRIPTION_NORMALIZE , DECREE_TYPE_ID, ATTACHMENT_ID
    					 FROM GBS.BOARDS_DECREES_ATTACHMENTS
    					WHERE BOARD_ID =:BOARD_ID AND ATTACHMENT_TYPE_ID IN (select ATTACHMENT_TYPE_ID from gbs.ATTACHMENT_TYPE where (LOWER(FUNCTION_USED) = LOWER('ADD_BOARD') OR LOWER(FUNCTION_USED) = LOWER('UPDATE_BOARD')))"></entry>
    					
    			<entry key="GET_BOARD_HISTORY_LOG_QUERY" value="SELECT BOARD_HISTORY_ID, BOARD_ID, BOARD_NAME, BOARD_TYPE_ID, DECREE_LIST, PARENT_BOARD_ID, SOURCE_ORGANIZATION_ID, DESTINATION_ORGANIZATION_IDS, CREATED_ON, CREATED_BY, ACTION_OPERATION , NOTIFICATION_BEFORE, NOTIFICATION_EVERY 
																FROM GBS.BOARD_HISTORY WHERE BOARD_ID = :BOARD_ID ORDER BY CREATED_ON DESC "></entry>		
    			
    			<entry key="GET_EXPIRED_BOARDS_QUERY" 
    					value="SELECT BOARD_ID, BOARD_NAME, STATUS_ID, SOURCE_ORGANIZATION_ID, BOARD_START_DATE, BOARD_EXPIRY_DATE, BOARD_TYPE_ID, PARENT_BOARD_ID , NOTIFICATION_BEFORE, NOTIFICATION_EVERY , (SELECT B.BOARD_NAME FROM GBS.BOARD B WHERE B.BOARD_ID = D.PARENT_BOARD_ID) AS PARENT_BOARD_NAME
    							FROM GBS.BOARD D
    							WHERE DATE(BOARD_EXPIRY_DATE) &lt;= :TODAY AND STATUS_ID != 
    							(SELECT STATUS_ID
								FROM GBS.STATUS
								WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('BOARD')) 
								AND LOWER(STATUS_NAME_KEY) = LOWER('expired'))"></entry>			
    			
    			<entry key="UPDATE_EXPIRED_BOARDS_STATUS_QUERY" 
    					value="UPDATE GBS.BOARD 
    							SET UPDATED_BY=:UPDATED_BY, UPDATED_ON=:UPDATED_ON,  STATUS_ID = (SELECT STATUS_ID FROM GBS.STATUS WHERE STATUS_NAME_KEY = 'expired' AND STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE STATUS_TYPE_NAME='Board'))
    							WHERE BOARD_ID= :BOARD_ID"></entry>		
    							
    			<entry key="GET_MEMBER_STATUS_QUERY" 
    					value="SELECT STATUS_ID FROM GBS.MEMBER WHERE MEMBER_ID = :MEMBER_ID"></entry>	
    					
    			<entry key="GET_BOARD_STATUS_QUERY" 
    					value="SELECT STATUS_ID FROM GBS.BOARD WHERE BOARD_ID = :BOARD_ID"></entry>		
    					
    			<entry key="GET_BOARD_EXPIRED_STATUS_QUERY" value="SELECT STATUS_ID
					FROM GBS.STATUS
					WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('BOARD')) AND LOWER(STATUS_NAME_KEY) = LOWER('expired')"></entry>		
    					
    			<entry key="ADD_MEMBER_NOTIFICATION_QUERY" value="INSERT INTO GBS.NOTIFICATION(BOARD_ID, MEMBER_ID, ACTUAL_DATE, REPEAT_EVERY, NOTIFICATION_DATE, CREATED_BY, CREATED_ON, NOTIFICATION_TYPE) 
    																				VALUES(:BOARD_ID, :MEMBER_ID, :ACTUAL_DATE, :REPEAT_EVERY, :NOTIFICATION_DATE, :CREATED_BY, :CREATED_ON, :NOTIFICATION_TYPE)"></entry>	
    			
    			<entry key="GET_BOARD_NOTIFICATIONS_QUERY" 
    					value="SELECT BOARD_ID,BOARD_NAME,BOARD_NAME_NORMALIZED,PARENT_BOARD_ID,BOARD_TYPE_ID, BOARD_TYPE_NAME,STATUS_ID,STATUS_NAME,SOURCE_ORGANIZATION_NAME,SOURCE_ORGANIZATION_ID, 
								BOARD_EXPIRY_DATE,BOARD_START_DATE,ACTUAL_DATE,NOTIFICATION_ID,LAST_RUN_DATE,REPEAT_EVERY,NOTIFICATION_DATE,MEMBER_ID,MEMBER_NAME,ROLE_NAME,MEMBER_END_DATE, NOTIFICATION_TYPE , SUBSCRIBER_EMAIL
								FROM GBS.BOARDS_MEMBERS_NOTIFICATIONS WHERE DATE(NOTIFICATION_DATE) BETWEEN :NOTIFICATION_DATE_START AND :NOTIFICATION_DATE_END AND LOWER(NOTIFICATION_TYPE) = LOWER('BOARD')
								AND DATE(ACTUAL_DATE) &gt; :TODAY"></entry>	
				
				<entry key="GET_MEMBER_NOTIFICATIONS_QUERY" 
    					value="SELECT BOARD_ID,BOARD_NAME,BOARD_NAME_NORMALIZED,PARENT_BOARD_ID,BOARD_TYPE_ID, BOARD_TYPE_NAME,STATUS_ID,STATUS_NAME,SOURCE_ORGANIZATION_NAME,SOURCE_ORGANIZATION_ID, 
								BOARD_EXPIRY_DATE,BOARD_START_DATE,ACTUAL_DATE,NOTIFICATION_ID,LAST_RUN_DATE,REPEAT_EVERY,NOTIFICATION_DATE,MEMBER_ID,MEMBER_NAME,ROLE_NAME,MEMBER_END_DATE, NOTIFICATION_TYPE , SUBSCRIBER_EMAIL
								FROM GBS.BOARDS_MEMBERS_NOTIFICATIONS WHERE DATE(NOTIFICATION_DATE) BETWEEN :NOTIFICATION_DATE_START AND :NOTIFICATION_DATE_END AND LOWER(NOTIFICATION_TYPE) = LOWER('MEMBER')
								AND DATE(ACTUAL_DATE) &gt; :TODAY"></entry>					
								
				<entry key="GET_MEMBER_HISTORY_LOG_QUERY" value="SELECT MEMBER_HISTORY_ID, MEMBER_ID, MEMBER_NAME, CPR_NUMBER, MEMBER_OCCUPATION, ORGANIZATION_ID, ROLE_ID, ORGANIZATION_ON_BEHALF_ID, CREATED_BY, CREATED_ON, MEMBER_START_DATE, MEMBER_END_DATE, BOARD_ID, BOARD_NAME, BOARD_TYPE_ID, BOARD_TYPE_NAME, BOARD_EXPIRY_DATE, BOARD_START_DATE, DECREE_LIST, PARENT_BOARD_ID, MEMBER_STATUS_ID, STATUS, ACTION_OPERATION, NOTIFICATION_BEFORE, NOTIFICATION_EVERY 
																FROM GBS.MEMBER_HISTORY WHERE MEMBER_ID = :MEMBER_ID ORDER BY CREATED_ON DESC "></entry>
				
				<entry key="GET_EXPIRED_MEMBERS_QUERY" 
    					value="SELECT MEMBER_ID, BOARD_ID, CPR_NUMBER, STATUS_ID, ROLE_ID, MEMBER_NAME, MEMBER_NAME_NORMALIZED, MEMBER_OCCUPATION, MEMBER_OCCUPATION_NORMLIZED, ORGANIZATION_ID, ORGANIZATION_ON_BEHALF_ID, MEMBER_START_DATE, MEMBER_END_DATE, NOTIFICATION_BEFORE, NOTIFICATION_EVERY 
    							FROM GBS.MEMBER
    							WHERE DATE(MEMBER_END_DATE) &lt;= :TODAY AND STATUS_ID != (SELECT STATUS_ID
								FROM GBS.STATUS
								WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('MEMBER')) AND LOWER(STATUS_NAME_KEY) = LOWER('expired'))"></entry>	
    							
    			<entry key="GET_MEMBER_EXPIRED_STATUS_QUERY" value="SELECT STATUS_ID
					FROM GBS.STATUS
					WHERE STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE LOWER(STATUS_TYPE_NAME)=LOWER('MEMBER')) AND LOWER(STATUS_NAME_KEY) = LOWER('expired')"></entry>
					
				<entry key="UPDATE_EXPIRED_MEMBERS_STATUS_QUERY" 
    					value="UPDATE GBS.MEMBER 
    							SET UPDATED_BY=:UPDATED_BY, UPDATED_ON=:UPDATED_ON,  STATUS_ID = (SELECT STATUS_ID FROM GBS.STATUS WHERE STATUS_NAME_KEY = 'expired' AND STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE STATUS_TYPE_NAME='Member'))
    							WHERE MEMBER_ID= :MEMBER_ID"></entry>
    			
    			<entry key="GET_MEMBER_DECREE_QUERY" 
    					value="SELECT DECREE_ID , DECREE_NUMBER , DECREE_YEAR , DECREE_DESCRIPTION , DECREE_DESCRIPTION_NORMALIZE , DECREE_TYPE_ID, ATTACHMENT_ID
    					 FROM GBS.MEMBERS_DECREES
    					WHERE MEMBER_ID =:MEMBER_ID AND ATTACHMENT_TYPE_ID IN (select ATTACHMENT_TYPE_ID from gbs.ATTACHMENT_TYPE where (LOWER(FUNCTION_USED) = LOWER('ADD_BOARD') OR LOWER(FUNCTION_USED) = LOWER('UPDATE_BOARD')))"></entry>
    					
    			<entry 	key="DELETE_SUBSCRIBER_QUERY" 
    					value="DELETE FROM GBS.SUBSCRIBER WHERE 
						NOTIFICATION_ID =  (SELECT NOTIFICATION_ID FROM GBS.NOTIFICATION WHERE BOARD_ID = :BOARD_ID  AND LOWER(NOTIFICATION_TYPE) = LOWER('BOARD') )" >
    			</entry>
    			
    			<entry 	key="DELETE_NOTIFICATION_QUERY" 
    					value="DELETE FROM gbs.NOTIFICATION WHERE BOARD_ID = :BOARD_ID  AND LOWER(NOTIFICATION_TYPE) = LOWER('BOARD')" >
    			</entry>
    			
    			<entry key="UPDATE_MEMBER_NOTIFICATION_QUERY" value="UPDATE GBS.NOTIFICATION 
    															SET REPEAT_EVERY=:REPEAT_EVERY,NOTIFICATION_DATE=:NOTIFICATION_DATE,UPDATED_BY=:UPDATED_BY, UPDATED_ON=:UPDATED_ON
    															WHERE MEMBER_ID=:MEMBER_ID"></entry>	
    															
    			<entry key="GET_NOTIFICATION_BY_MEMBER_ID_QUERY" value="SELECT NOTIFICATION_ID, SUBSCRIBER_EMAIL FROM GBS.NOTIFICATIONS WHERE MEMBER_ID = MEMBER_ID"></entry>	
    			
    			<entry 	key="DELETE_MEMBER_SUBSCRIBER_QUERY" 
    					value="DELETE FROM GBS.SUBSCRIBER WHERE 
						NOTIFICATION_ID =  (SELECT NOTIFICATION_ID FROM GBS.NOTIFICATION WHERE MEMBER_ID = :MEMBER_ID  AND LOWER(NOTIFICATION_TYPE) = LOWER('MEMBER') )" >
    			</entry>
    			
    			<entry 	key="DELETE_MEMBER_NOTIFICATION_QUERY" 
    					value="DELETE FROM gbs.NOTIFICATION WHERE MEMBER_ID = :MEMBER_ID  AND LOWER(NOTIFICATION_TYPE) = LOWER('MEMBER')" >
    			</entry>
    			
    			<entry 	key="GET_ATTACHMENT_BY_BOARD_ID_QUERY" 
    					value="SELECT ATTACHMENT_ID, ATTACHMENT_NAME, ATTACHMENT_NAME_NORMALIZED, ATTACHMENT_MIME, ATTACHMENT_SIZE, CREATED_ON, ATTACHMENT_TYPE_ID, BOARD_ID 
    							FROM GBS.ATTACHMENT WHERE DECREE_ID IS NULL AND BOARD_ID = :BOARD_ID" >
    			</entry>
    			
    			<entry key="UPDATE_BOARD_STATUS_QUERY" 
    					value="UPDATE GBS.BOARD 
    							SET UPDATED_BY=:UPDATED_BY, UPDATED_ON=:UPDATED_ON,  STATUS_ID = (SELECT STATUS_ID FROM GBS.STATUS WHERE STATUS_NAME_KEY = 'valid' AND STATUS_TYPE_ID = (SELECT STATUS_TYPE_ID FROM GBS.STATUS_TYPE WHERE STATUS_TYPE_NAME='Board'))
    							WHERE BOARD_ID= :BOARD_ID"></entry>
    			
    			<entry key="ADD_BOARD_WITHOUT_DECREE_QUERY" 
    					value="INSERT INTO GBS.BOARD_DECREE(BOARD_ID, DECREE_ID) 
    												VALUES(:BOARD_ID, NULL)"></entry>																													
			</map>
		</constructor-arg>
	</bean>

	<!-- Write here your own dao ,  this is an example   -->
	<bean id="gbsDao" class="bh.gov.cio.gbs.dataaccess.GbsDAO" parent="baseDao" />
	<bean id="lookupDao" class="bh.gov.cio.gbs.dataaccess.LookupDAO" parent="baseDao" />
	<bean id="notificationDao" class="bh.gov.cio.gbs.dataaccess.NotificationDAO" parent="baseDao" />

</beans>
